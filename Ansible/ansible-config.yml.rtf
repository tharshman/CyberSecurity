{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red41\green159\blue173;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c18039\c68235\c73333;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # config file for ansible -- https://ansible.com/
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ===============================================
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # nearly all parameters can be overridden in ansible-playbook
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # or with command line flags. ansible will read ANSIBLE_CONFIG,
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ansible.cfg in the current working directory, .ansible.cfg in
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # the home directory or /etc/ansible/ansible.cfg, whichever it
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # finds first
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [defaults]
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # some basic default values...
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 #inventory\'a0 \'a0 \'a0 = /etc/ansible/hosts
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #library\'a0 \'a0 \'a0 \'a0 = /usr/share/my_modules/
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #module_utils \'a0 = /usr/share/my_module_utils/
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #remote_tmp \'a0 \'a0 = ~/.ansible/tmp
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #local_tmp\'a0 \'a0 \'a0 = ~/.ansible/tmp
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #plugin_filters_cfg = /etc/ansible/plugin_filters.yml
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #forks\'a0 \'a0 \'a0 \'a0 \'a0 = 5
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #poll_interval\'a0 = 15
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #sudo_user\'a0 \'a0 \'a0 = root
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ask_sudo_pass = True
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ask_pass\'a0 \'a0 \'a0 = True
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #transport\'a0 \'a0 \'a0 = smart
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #remote_port\'a0 \'a0 = 22
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #module_lang\'a0 \'a0 = C
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #module_set_locale = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # plays will gather facts by default, which contain information about
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # the remote system.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # smart - gather by default, but don't regather if already gathered
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # implicit - gather by default, turn off with gather_facts: False
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # explicit - do not gather by default, must say gather_facts: True
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #gathering = implicit
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # This only affects the gathering done by a play's gather_facts directive,
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default gathering retrieves all facts subsets
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # all - gather all subsets
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # network - gather min and network facts
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # hardware - gather hardware facts (longest facts to retrieve)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # virtual - gather min and virtual facts
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # facter - import facts from facter
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ohai - import facts from ohai
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # You can combine them using comma (ex: network,virtual)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # You can negate them using ! (ex: !hardware,!facter,!ohai)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # A minimal set of facts is always gathered.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #gather_subset = all
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # some hardware related facts are collected
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # with a maximum timeout of 10 seconds. This
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # option lets you increase or decrease that
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # timeout to something more suitable for the
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # environment.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # gather_timeout = 10
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Ansible facts are available inside the ansible_facts.* dictionary
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # namespace. This setting maintains the behaviour which was the default prior
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # to 2.5, duplicating these variables into the main namespace, each with a
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # prefix of 'ansible_'.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # This variable is set to True by default for backwards compatibility. It
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # will be changed to a default of 'False' in a future release.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ansible_facts.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # inject_facts_as_vars = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # additional paths to search for roles in, colon separated
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #roles_path\'a0 \'a0 = /etc/ansible/roles
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # uncomment this to disable SSH key host checking
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #host_key_checking = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # change the default callback, you can only have one 'stdout' type\'a0 enabled at a time.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #stdout_callback = skippy
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 ## Ansible ships with some plugins that require whitelisting,
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 ## this is done to avoid running all of a type by default.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 ## These setting lists those that you want enabled for your system.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 ## Custom plugins should not need this unless plugin author specifies it.
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # enable callback plugins, they can output to stdout but cannot be 'stdout' type.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #callback_whitelist = timer, mail
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Determine whether includes in tasks and handlers are "static" by
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # default. As of 2.0, includes are dynamic by default. Setting these
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # values to True will make includes behave more like they did in the
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # 1.x versions.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #task_includes_static = False
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #handler_includes_static = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Controls if a missing handler for a notification event is an error or a warning
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #error_on_missing_handler = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # change this for alternative sudo implementations
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #sudo_exe = sudo
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # What flags to pass to sudo
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # WARNING: leaving out the defaults might create unexpected behaviours
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #sudo_flags = -H -S -n
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # SSH timeout
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #timeout = 10
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # default user to use for playbooks if user is not specified
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # (/usr/bin/ansible will use current user as default)
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 remote_user = sysadmin
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # logging is off by default unless this path is defined
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if so defined, consider logrotate
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #log_path = /var/log/ansible.log
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # default module name for /usr/bin/ansible
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #module_name = command
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # use this shell for commands executed under sudo
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # you may need to change this to bin/bash in rare instances
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if sudo is constrained
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #executable = /bin/sh
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if inventory variables overlap, does the higher precedence one win
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # or are hash values merged together?\'a0 The default is 'replace' but
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # this can also be set to 'merge'.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #hash_behaviour = replace
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default, variables from roles will be visible in the global variable
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # scope. To prevent this, the following option can be enabled, and only
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # tasks and handlers within the role will see the variables there
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #private_role_vars = yes
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # list any Jinja2 extensions to enable here:
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if set, always use this private key file for authentication, same as
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if passing --private-key to ansible or ansible-playbook
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #private_key_file = /path/to/file
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # If set, configures the path to the Vault password file as an alternative to
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # specifying --vault-password-file on the command line.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #vault_password_file = /path/to/vault_password_file
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # format of string \{\{ ansible_managed \}\} available within Jinja2
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # templates indicates to users editing templates files will be replaced.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # replacing \{file\}, \{host\} and \{uid\} and strftime codes with proper values.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ansible_managed = Ansible managed: \{file\} modified on %Y-%m-%d %H:%M:%S by \{uid\} on \{host\}
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \{file\}, \{host\}, \{uid\}, and the timestamp can all interfere with idempotence
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # in some situations so the default is a static string:
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ansible_managed = Ansible managed
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default, ansible-playbook will display "Skipping [host]" if it determines a task
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # should not be run on a host.\'a0 Set this to "False" if you don't want to see these "Skipping"
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # messages. NOTE: the task header will still be shown regardless of whether or not the
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # task is skipped.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #display_skipped_hosts = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default, if a task in a playbook does not include a name: field then
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ansible-playbook will construct a header that includes the task's action but
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # not the task's args.\'a0 This is a security feature because ansible cannot know
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if the *module* considers an argument to be no_log at the time that the
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # header is printed.\'a0 If your environment doesn't have a problem securing
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # stdout from ansible-playbook (or you have manually specified no_log in your
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # playbook on all of the tasks where you have secret information) then you can
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # safely set this to True to get more informative messages.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #display_args_to_stdout = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default (as of 1.3), Ansible will raise errors when attempting to dereference
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Jinja2 variables that are not set in templates or action lines. Uncomment this line
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # to revert the behavior to pre-1.3.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #error_on_undefined_vars = False
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default (as of 1.6), Ansible may display warnings based on the configuration of the
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # system running ansible itself. This may include warnings about 3rd party packages or
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # other conditions that should be resolved if possible.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # to disable these warnings, set the following value to False:
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #system_warnings = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default (as of 1.4), Ansible may display deprecation warnings for language
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # features that should no longer be used and will be removed in future versions.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # to disable these warnings, set the following value to False:
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #deprecation_warnings = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # (as of 1.8), Ansible can optionally warn when usage of the shell and
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # command module appear to be simplified by using a default Ansible module
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # instead.\'a0 These warnings can be silenced by adjusting the following
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # setting or adding warn=yes or warn=no to the end of the command line
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # parameter string.\'a0 This will for example suggest using the git module
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # instead of shelling out to the git command.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # command_warnings = False
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # set plugin path directories here, separate with colons
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #action_plugins \'a0 \'a0 = /usr/share/ansible/plugins/action
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #become_plugins \'a0 \'a0 = /usr/share/ansible/plugins/become
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #cache_plugins\'a0 \'a0 \'a0 = /usr/share/ansible/plugins/cache
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #callback_plugins \'a0 = /usr/share/ansible/plugins/callback
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #connection_plugins = /usr/share/ansible/plugins/connection
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #lookup_plugins \'a0 \'a0 = /usr/share/ansible/plugins/lookup
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #inventory_plugins\'a0 = /usr/share/ansible/plugins/inventory
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #vars_plugins \'a0 \'a0 \'a0 = /usr/share/ansible/plugins/vars
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #filter_plugins \'a0 \'a0 = /usr/share/ansible/plugins/filter
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #test_plugins \'a0 \'a0 \'a0 = /usr/share/ansible/plugins/test
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #terminal_plugins \'a0 = /usr/share/ansible/plugins/terminal
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #strategy_plugins \'a0 = /usr/share/ansible/plugins/strategy
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default, ansible will use the 'linear' strategy but you may want to try
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # another one
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #strategy = free
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default callbacks are not loaded for /bin/ansible, enable this if you
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # want, for example, a notification or logging callback to also apply to
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # /bin/ansible runs
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #bin_ansible_callbacks = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # don't like cows?\'a0 that's unfortunate.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #nocows = 1
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # set which cowsay stencil you'd like to use by default. When set to 'random',
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # a random stencil will be selected for each task. The selection will be filtered
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # against the `cow_whitelist` option below.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #cow_selection = default
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #cow_selection = random
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # when using the 'random' option for cowsay, stencils will be restricted to this list.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # it should be formatted as a comma-separated list with no spaces between names.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # NOTE: line continuations here are for formatting purposes only, as the INI parser
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 \'a0 \'a0 in python does not support them.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #cow_whitelist=bud-frogs,bunny,cheese,daemon,default,dragon,elephant-in-snake,elephant,eyes,\\
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #\cf3 \strokec3 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \cf2 \strokec2 hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,\\
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #\cf3 \strokec3 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \cf2 \strokec2 stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader-koala,vader,www
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # don't like colors either?
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # set to 1 if you don't want colors, or export ANSIBLE_NOCOLOR=1
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #nocolor = 1
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if set to a persistent type (not 'memory', for example 'redis') fact values
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # from previous runs in Ansible will be stored.\'a0 This may be useful when
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # wanting to use, for example, IP information from one group of servers
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # without having to talk to them in the same playbook run to get their
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # current IP information.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #fact_caching = memory
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 #This option tells Ansible where to cache facts. The value is plugin dependent.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #For the jsonfile plugin, it should be a path to a local directory.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #For the redis plugin, the value is a host:port:database triplet: fact_caching_connection = localhost:6379:0
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 #fact_caching_connection=/tmp
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # retry files
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # When a playbook fails a .retry file can be created that will be placed in ~/
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # You can enable this feature by setting retry_files_enabled to True
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # and you can change the location of the files by setting retry_files_save_path
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 #retry_files_enabled = False
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #retry_files_save_path = ~/.ansible-retry
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # squash actions
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Ansible can optimise actions that call modules with list parameters
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # when looping. Instead of calling the module once per with_ item, the
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # module is called once with all items at once. Currently this only works
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # under limited circumstances, and only with parameters named 'name'.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #squash_actions = apk,apt,dnf,homebrew,pacman,pkgng,yum,zypper
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # prevents logging of task data, off by default
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #no_log = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # prevents logging of tasks, but only on the targets, data is still logged on the master/controller
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #no_target_syslog = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # controls whether Ansible will raise an error or warning if a task has no
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # choice but to create world readable temporary files to execute a module on
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # the remote machine.\'a0 This option is False by default for security.\'a0 Users may
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # turn this on to have behaviour more like Ansible prior to 2.1.x.\'a0 See
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # for more secure ways to fix this than enabling this option.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #allow_world_readable_tmpfiles = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # controls the compression level of variables sent to
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # worker processes. At the default of 0, no compression
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # is used. This value must be an integer from 0 to 9.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #var_compression_level = 9
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # controls what compression method is used for new-style ansible modules when
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # they are sent to the remote system.\'a0 The compression types depend on having
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # support compiled into both the controller's python and the client's python.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # The names should match with the python Zipfile compression types:
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # * ZIP_STORED (no compression. available everywhere)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # * ZIP_DEFLATED (uses zlib, the default)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # These values may be set per host via the ansible_module_compression inventory
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # variable
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #module_compression = 'ZIP_DEFLATED'
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # This controls the cutoff point (in bytes) on --diff for files
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # set to 0 for unlimited (RAM may suffer!).
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #max_diff_size = 1048576
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # This controls how ansible handles multiple --tags and --skip-tags arguments
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # on the CLI.\'a0 If this is True then multiple arguments are merged together.\'a0 If
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # it is False, then the last specified argument is used and the others are ignored.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # This option will be removed in 2.8.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #merge_multiple_cli_flags = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Controls showing custom stats at the end, off by default
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #show_custom_stats = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Controls which files to ignore when using a directory as inventory with
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # possibly multiple sources (both static and dynamic)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # This family of modules use an alternative execution path optimized for network appliances
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # only update this setting if you know how this works, otherwise it can break module execution
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #network_group_modules=eos, nxos, ios, iosxr, junos, vyos
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # When enabled, this option allows lookups (via variables like \{\{lookup('foo')\}\} or when used as
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # a loop with `with_foo`) to return data that is not marked "unsafe". This means the data may contain
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # jinja2 templating language which will be run through the templating engine.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ENABLING THIS COULD BE A SECURITY RISK
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #allow_unsafe_lookups = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # set default errors for all plays
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #any_errors_fatal = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [inventory]
\f1\fs24 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # enable inventory plugins, default: 'host_list', 'script', 'auto', 'yaml', 'ini', 'toml'
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #enable_plugins = host_list, virtualbox, yaml, constructed
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ignore these extensions when parsing a directory as inventory source
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ignore_extensions = .pyc, .pyo, .swp, .bak, ~, .rpm, .md, .txt, ~, .orig, .ini, .cfg, .retry
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ignore files matching these patterns when parsing a directory as inventory source
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ignore_patterns=
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # If 'true' unparsed inventory sources become fatal errors, they are warnings otherwise.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #unparsed_is_failed=False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [privilege_escalation]
\f1\fs24 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 #become=True
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #become_method=sudo
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #become_user=root
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #become_ask_pass=False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [paramiko_connection]
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # uncomment this line to cause the paramiko connection plugin to not record new host
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # keys encountered.\'a0 Increases performance on new host additions.\'a0 Setting works independently of the
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # host key checking setting above.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #record_host_keys=False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # by default, Ansible requests a pseudo-terminal for commands executed under sudo. Uncomment this
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # line to disable this behaviour.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #pty=False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # paramiko will default to looking for SSH keys initially when trying to
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # authenticate to remote devices.\'a0 This is a problem for some network devices
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # that close the connection after a key failure.\'a0 Uncomment this line to
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # disable the Paramiko look for keys function
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #look_for_keys = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # When using persistent connections with Paramiko, the connection runs in a
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # background process.\'a0 If the host doesn't already have a valid SSH key, by
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # default Ansible will prompt to add the host key.\'a0 This will cause connections
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # running in background processes to fail.\'a0 Uncomment this line to have
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Paramiko automatically add host keys.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #host_key_auto_add = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [ssh_connection]
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # ssh arguments to use
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Leaving off ControlPersist will result in poor performance, so use
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # paramiko on older platforms rather than removing it, -C controls compression use
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # The base directory for the ControlPath sockets.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # This is the "%(directory)s" in the control_path option
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Example:
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # control_path_dir = /tmp/.ansible/cp
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #control_path_dir = ~/.ansible/cp
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # The path to use for the ControlPath sockets. This defaults to a hashed string of the hostname,
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # port and username (empty string in the config). The hash mitigates a common problem users
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # found with long hostnames and the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # In those cases, a "too long for Unix domain socket" ssh error would occur.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Example:
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # control_path = %(directory)s/%%h-%%r
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #control_path =
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Enabling pipelining reduces the number of SSH operations required to
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # execute a module on the remote server. This can result in a significant
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # performance improvement when enabled, however when using "sudo:" you must
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # first disable 'requiretty' in /etc/sudoers
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # By default, this option is disabled to preserve compatibility with
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # sudoers configurations that have requiretty (the default on many distros).
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #pipelining = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Control the mechanism for transferring files (old)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 * smart = try sftp and then try scp [default]
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 * True = use scp only
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 * False = use sftp only
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #scp_if_ssh = smart
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Control the mechanism for transferring files (new)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # If set, this will override the scp_if_ssh option
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 * sftp\'a0 = use sftp to transfer files
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 * scp \'a0 = use scp to transfer files
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 * piped = use 'dd' over SSH to transfer files
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # \'a0 * smart = try sftp, scp, and piped, in that order [default]
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #transfer_method = smart
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # if False, sftp will not use batch mode to transfer files. This may cause some
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # types of file transfer failures impossible to catch however, and should
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # only be disabled if your sftp version has problems with batch mode
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #sftp_batch_mode = False
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # The -tt argument is passed to ssh when pipelining is not enabled because sudo\'a0
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # requires a tty by default.\'a0
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #usetty = True
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Number of times to retry an SSH connection to a host, in case of UNREACHABLE.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # For each retry attempt, there is an exponential backoff,
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # so after the first attempt there is 1s wait, then 2s, 4s etc. up to 30s (max).
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #retries = 3
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [persistent_connection]
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Configures the persistent connection timeout value in seconds.\'a0 This value is
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # how long the persistent connection will remain idle before it is destroyed.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # If the connection doesn't receive a request before the timeout value
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # expires, the connection is shutdown. The default value is 30 seconds.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #connect_timeout = 30
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # The command timeout value defines the amount of time to wait for a command
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # or RPC call before timing out. The value for the command timeout must
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # be less than the value of the persistent connection idle timeout (connect_timeout)
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # The default value is 30 second.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #command_timeout = 30
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [accelerate]
\f1\fs24 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 #accelerate_port = 5099
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #accelerate_timeout = 30
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #accelerate_connect_timeout = 5.0
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # The daemon timeout is measured in minutes. This time is measured
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # from the last activity to the accelerate daemon.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #accelerate_daemon_timeout = 30
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # If set to yes, accelerate_multi_key will allow multiple
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # private keys to be uploaded to it, though each user must
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # have access to the system via SSH to add a new key. The default
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # is "no".
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #accelerate_multi_key = yes
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [selinux]
\f1\fs24 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # file systems that require special treatment when dealing with security context
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # the default behaviour that copies the existing context or uses the user default
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # needs to be changed to use the file system dependent context.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p,vfat
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Set this to yes to allow libvirt_lxc connections to work without SELinux.
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #libvirt_lxc_noseclabel = yes
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [colors]
\f1\fs24 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 #highlight = white
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #verbose = blue
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #warn = bright purple
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #error = red
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #debug = dark gray
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #deprecate = purple
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #skip = cyan
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #unreachable = red
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #ok = green
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #changed = yellow
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #diff_add = green
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #diff_remove = red
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 #diff_lines = cyan
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf3 [diff]
\f1\fs24 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Always print diff when running ( same as always running with -D/--diff )
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # always = no
\f1\fs24 \cf3 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf3 \
\pard\pardeftab720\sl312\partightenfactor0

\f0\fs22\fsmilli11333 \cf2 \strokec2 # Set how many context lines to show in diff
\f1\fs24 \cf3 \strokec3 \

\f0\fs22\fsmilli11333 \cf2 \strokec2 # context = 3
\f1\fs24 \cf3 \strokec3 \
}